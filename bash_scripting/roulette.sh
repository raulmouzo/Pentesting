#!/bin/bash

#Colours

greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"






function ctrl_c(){
	echo -e "\n${redColour}[!]${endColour}\tAborting...\n"
	exit 1

}

# Ctrl + c

trap ctrl_c INT

function help(){
	echo -e "\n${yellowColour}USAGE:${endColour}"
	echo -e "${purpleColour}$0${endColour} ${greenColour}-m${endColour} money ${greenColour}-t${endColour} technique\n"
	echo -e "${yellowColour}OPTIONS:${endColour}"

	echo -e "\t${greenColour}-m${endColour}\t Set money to play"
	echo -e "\t${greenColour}-t${endColour}\t Set techinique to play ${grayColour}(martingale / inverseLabrouchere)${endColour}"

	echo -e ""
}


function martingale(){
	let -i money=$1	

	echo -e "\tInitial money: ${yellowColour}$money $ ${endColour}\n"
	echo -ne "Money to bet (1-$money): " && read initial_bet
	echo -ne "Bet to even or odd ${grayColour}(even ${yellowColour}~ default${endColour} / odd): ${endColour}" && read type_bet
	echo -ne "Amount earned to reset: " && read reset_amount

	if [[ $initial_bet =~ ^[0-9]+$ ]] && [ "$initial_bet" -gt 0 ] && (( $initial_bet < $money + 1)) && [[ $reset_amount =~ ^[0-9]+$ ]] && [ "$reset_amount" -gt 0 ]; then 
		if [ "$type_bet" == "odd" ]; then 
			num=0
		else 
			type_bet="even"
			num=1
		fi
	else
		echo -e "\n\n${redColour}[!]\tIncorrect parameters\n"${endColour}
		martingale $money
		exit 0
	fi


#	echo -e "\nCurrent bet ${yellowColour}$initial_bet $ ${endColour}to ${yellowColour}$type_bet${endColour}"
	
		
	let -i current_bet=$initial_bet
	let -i counter=1
	let -i last_money_reset=$money
	let -i total_won=0
	let -i total_lost=0
	let -i num_resets=0
	

	while true; do
		rand_num="$((RANDOM % 37))"
		let money-=$current_bet
#		echo -e "\n\n${yellowColour}[$counter]${endColour} ${grayColour}WIN NUMBER${endColour} ${purpleColour} $rand_num $endColour"
#		echo -e "\n\t${purpleColour}Current bet:${endColour} $current_bet"
#		echo -e "\t${purpleColour}Money:${endColour} $money"
	
		if [ "$rand_num" -eq 0 ] || ((rand_num % 2 != num )); then 
#			echo -e "\n\t${redColour}You lose${endColour}\n"
			
			let total_lost+=$current_bet
			let current_bet+=$current_bet
		else
#			echo -e "\n\t${greenColour}You win${endColour}\n"		
			let money+=$(($current_bet * 2))
			let total_won+=$(($current_bet))
#			echo -e "Now you have ${yellowColour} $money $ ${endColour}\n"
		fi
		
		if [ "$money" -le 0 ] || [ "$current_bet" -gt "$money" ]; then
#			echo -e "${redColour}[!]${endColour}\tNot enought money ($money$) to bet ($current_bet $)\n"	
			if [ "$money" -gt "$initial_bet" ]; then
				let current_bet=$initial_bet
#				echo -e "${turquoiseColour}[!] Current bet changed to ${yellowColour}$current_bet${endColour}\n"
				let num_resets++
				continue
			fi

			echo -e "\n\n${blueColour}GAME SUMMARY:${endColour}" 
			echo -e "\tTechnique: ${yellowColour}Martingale${endColour}"
			echo -e "\tNumber os plays:${yellowColour} $counter ${endColour}\n"
			echo -e "\tTotal won:${yellowColour} $total_won ${endColour}"
			echo -e "\tTotal lost:${yellowColour} $total_lost ${endColour}"
			echo -e "\tNumber of resets:${yellowColour} $num_resets ${endColour}"
			break

		elif [ $(($money - $last_money_reset)) -ge $reset_amount ]; then
#			echo -e "${turquoiseColour}[!]${endColour}\tReset amount reached! Current bet: ${yellowColour}$initial_bet ${endColour}"
			let current_bet=$initial_bet
			let last_money_reset=$money
			let num_resets++
		fi
		
		let counter++

	done
}


function inverseLabrouchere(){
	money=$1
	echo -e "Executing inverseLabrouchere with money $money"
}



# Chekers 


while getopts "m:t:h" arg; do 
	case $arg in 
		m) money=$OPTARG;;
		t) technique=$OPTARG;;
	esac
done

if [ $money ] && [ $technique ]; then 
	if [ "$technique" == "martingale" ]; then 
		martingale $money
	elif [ "$technique" == "inverseLabrouchere" ]; then
		inverseLabrouchere $money 
	else
		help
	fi 
else 
	help
fi



